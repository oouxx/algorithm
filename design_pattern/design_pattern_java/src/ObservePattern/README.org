JDK 1.0 及更早版本的事件模型基于职责链模式，但是这种模型不适用于复杂的系统，因此在
JDK 1.1 及以后的各个版本中，事件处理模型采用基于观察者模式的委派事件模型
(DelegationEvent Model, DEM)，即一个 Java 组件所引发的事件并不由引发事件的对象自己来负引发的事件并不由引发事件的对象自己来负责处理，而是委派给独立的事件处理对象负责。


* 主要优点
观察者模式的主要优点如下：
1. 观察者模式可以实现表示层和数据逻辑层的分离，定义了稳定的消息更新传递机制，并抽
象了更新接口，使得可以有各种各样不同的表示层充当具体观察者角色 。
2. 观察者模式在观察目标和观察者之间建立一个抽象的耦合。观察目标只需要维持一个抽象
观察者的集合，无须了解其具体观察者。由于观察目标和观察者没有紧密地耦合在一起，因
此它们可以属于不同的抽象化层次。
3. 观察者模式支持广播通信，观察目标会向所有已注册的观察者对象发送通知，简化了一对
多系统设计的难度。
4. 观察者模式满足“开闭原则”的要求，增加新的具体观察者无须修改原有系统代码，在具体
观察者与观察目标之间不存在关联关系的情况下，增加新的观察目标也很方便。
* 主要缺点
观察者模式的主要缺点如下：
1. 如果一个观察目标对象有很多直接和间接观察者，将所有的观察者都通知到会花费很多时
间。
2. 如果在观察者和观察目标之间存在循环依赖，观察目标会触发它们之间进行循环调用，可
能导致系统崩溃。
3. 观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只
是知道观察目标发生了变化。是知道观察目标发生了变化。
* 适用场景
在以下情况下可以考虑使用观察者模式：
1. 一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两个方面封装在独立的
对象中使它们可以各自独立地改变和复用。
2. 一个对象的改变将导致一个或多个其他对象也发生改变，而并不知道具体有多少对象将发
生改变，也不知道这些对象是谁。
3. 需要在系统中创建一个触发链，A对象的行为将影响 B 对象，B对象的行为将影响 C 对
象……，可以使用观察者模式创建一种链式触发机制。
